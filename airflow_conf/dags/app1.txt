from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime
import pandas as pd
import pymongo
import os

def extract_csv():
    # Lire le fichier CSV
    df = pd.read_csv('/opt/airflow/dags/data/world_population.csv')
    df.to_csv('/opt/airflow/dags/data/extracted_data.csv', index=False)

def transform_data():
    # Charger les données extraites
    df = pd.read_csv('/opt/airflow/dags/data/extracted_data.csv')
    
    # Transformer les données
    # Créer des colonnes calculées (par exemple, population en millions si besoin)
    df['Population_in_millions'] = df['2022 Population'] / 1_000_000

    # Sauvegarder les données transformées
    df.to_csv('/opt/airflow/dags/data/transformed_data.csv', index=False)

def load_data():
    mongo_uri = os.getenv("MONGO_URI", "mongodb+srv://airflow:airflow@airflow.6pc0m.mongodb.net/")
    if not mongo_uri:
        raise ValueError("MONGO_URI n'est pas défini dans les variables d'environnement")
    
    client = pymongo.MongoClient(mongo_uri)
    db = client["miniprojet"]
    
    # Charger les données transformées
    df = pd.read_csv('/opt/airflow/dags/data/transformed_data.csv')

    # Créer et remplir la dimension Pays
    pays_dim = df[['Rank','CCA3', 'Country/Territory', 'Capital', 'Continent', 'Area (km²)']].drop_duplicates()
    pays_dim = pays_dim.rename(columns={
        'Rank': 'rank',
        'CCA3': 'country_id',
        'Country/Territory': 'country_name',
        'Capital': 'capital',
        'Continent': 'continent',
        'Area (km²)': 'area_km2'
    })
    db['pays_dim'].delete_many({})
    db['pays_dim'].insert_many(pays_dim.to_dict("records"))
    
    # Créer et remplir la dimension Temps
    years = [1970, 1980, 1990, 2000, 2010, 2015, 2020, 2022]
    temps_dim = pd.DataFrame({
        'year_id': years,
        'year': years,
        'decade': [f"{str(year)[:3]}0s" for year in years]
    })
    db['temps_dim'].delete_many({})
    db['temps_dim'].insert_many(temps_dim.to_dict("records"))

    # Créer et remplir la table de faits Population
    population_records = []
    for year in years:
        population_records.extend([
            {
                'country_id': row['CCA3'],
                'year_id': year,
                'population': row[f'{year} Population'],
                'density': row['Density (per km²)'],
                'growth_rate': row['Growth Rate'],
                'world_population_percentage': row['World Population Percentage']
            }
            for _, row in df.iterrows()
        ])
    db['population_fact'].delete_many({})
    db['population_fact'].insert_many(population_records)
    print("Modèle en étoile chargé avec succès dans MongoDB.")

# Définition du DAG
default_args = {
    'start_date': datetime(2024, 11, 8),
}

with DAG('csv_etl_dag', default_args=default_args, schedule_interval='@daily', catchup=False) as dag:

    # Tâche d'extraction
    extract_task = PythonOperator(
        task_id='extract_csv',
        python_callable=extract_csv
    )

    # Tâche de transformation
    transform_task = PythonOperator(
        task_id='transform_data',
        python_callable=transform_data
    )

    # Tâche de chargement
    load_task = PythonOperator(
        task_id='load_data',
        python_callable=load_data
    )

    # Ordre d'exécution des tâches
    extract_task >> transform_task >> load_task